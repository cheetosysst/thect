<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Thect Blog</title>
    <link>https://thect.tw/tags/node.js/</link>
    <description>Thect Blog (Node.js)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 18 Aug 2020 17:12:48 +0800</lastBuildDate>
    
    <atom:link href="https://thect.tw/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>為什麼我決定不用自己寫的部落格後台?</title>
      <link>https://thect.tw/posts/20200818_blog/</link>
      <pubDate>Tue, 18 Aug 2020 17:12:48 +0800</pubDate>
      
      <guid>https://thect.tw/posts/20200818_blog/</guid>
      <description>&lt;p&gt;我在大概一個月前開始做一個部落格的系統，我很簡單地把它命名為「ThectBlog」，就是想表達這是為了我的使用而設計的部落格。&lt;/p&gt;
&lt;p&gt;在這之前，我對於網頁開發的經驗幾乎是零。先前只做過了一個沒有做完的縮網址。那是受到學弟的作品啟發才想要跟著做一個，但是最後也是不了了之。&lt;/p&gt;
&lt;p&gt;做部落格其實是我一直以來的一個目標，而這次的挑戰也是因為最近遇到了需要做網頁的工作。途中開始對網頁有了興趣，尤其是初次聽到了一個名詞「&lt;a href=&#34;https://zh.wikipedia.org/wiki/MVC&#34;&gt;MVC&lt;/a&gt;」。對不知道的人簡單解釋，它是一種網頁後台的架構，把後臺成了三種主要的區塊，「Model」、「View」、「Controller」，三者分開處理各自負責的工作。&lt;/p&gt;
&lt;h2 id=&#34;開發&#34;&gt;開發&lt;/h2&gt;
&lt;p&gt;最初聽到時我出現試圖以 &lt;a href=&#34;nodejs.org&#34;&gt;Node.js&lt;/a&gt; 寫寫看的想法。選用 Node.js 的考量是先前在做縮網址時有接觸過，且學弟是這方面的專家，有疑問的時候可以很快的找到方向。&lt;/p&gt;
&lt;p&gt;要單純做出 MVC 的「樣子」不是難事，包括閱讀相關的教學、反覆嘗試，我很快地做出地簡單的 MVC 伺服器，又寫了新的網頁模板來搭配。這個時候我我覺得我這次應該可以難得地做出一個完整的作品，途中我還信誓旦旦地跟學長誇口我覺得這個一定要做完(笑)。&lt;/p&gt;
&lt;p&gt;但這都只是最開端，最簡單的部分。我開始發現先前寫的 Code 有許多因新手不了解而犯下的錯誤，讓擴展功能時受限。現在回頭，這些問題在最開頭都可以透過 &lt;strong&gt;事前充足的資料蒐集&lt;/strong&gt; 避免，所以我花了大半的時間在重構上，多次變換不同的寫法。&lt;/p&gt;
&lt;h2 id=&#34;遇到困難&#34;&gt;遇到困難&lt;/h2&gt;
&lt;p&gt;舉個例子一個我遇到的問題，就是非同步。&lt;/p&gt;
&lt;p&gt;我發現，我實在對非同步的城市如何執行難以理解，我看了無數的影片解釋，但實際寫的時候卻是似懂非懂。反覆的遇到無法處理好 Promise，回傳時接收到的東西是空的。不得不說這個過程實在是非常消磨精神跟熱情，最後決定暫停不寫，也是因為無法處理好一些沒寫好 Async 造成的 Bug。&lt;/p&gt;
&lt;p&gt;另一個問題是我學習的方式，我很喜歡一邊寫一邊找答案。但這個學習方式很顯然遇到極限了。在學習 JS 時，明明知道這些非同步處理是很重要的一環，我還是沒有先搞懂。搞到最後集結了一堆一知半解的理解。其中光是一個讀黨的問題我就花了超過 4 天找解答，到最後還是沒搞懂，而是用抄的。&lt;/p&gt;
&lt;p&gt;還有我對這方面的了解不夠多，所以在寫的時候會一直「重新發明輪子」。明明可以簡單解決的問題，卻選用麻煩的方式處理。&lt;/p&gt;
&lt;h2 id=&#34;反省&#34;&gt;反省?&lt;/h2&gt;
&lt;p&gt;大概總結一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不清楚自己在幹嘛的時候先花時間讀懂再動手寫&lt;/li&gt;
&lt;li&gt;不要重新發明輪子&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;接下來要做什麼&#34;&gt;接下來要做什麼?&lt;/h2&gt;
&lt;p&gt;我在想，我大概會在 Go 跟 Python 之間選一個，作為接下來學習做後台的語言。有朋友跟我建議可以試試 Go，但是我的疑慮是我沒接觸過，反而是 Python 我已經寫好一陣子了，學習的成本比較低。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;沒寫過部落格，不確定怎麼寫的說&amp;hellip; 感覺最後寫得有點像我在發牢騷的說&lt;/p&gt;
&lt;p&gt;下一篇大概是火箭科普&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>